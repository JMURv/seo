// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/ctrl/sso/sso.go
//
// Generated by this command:
//
//	mockgen -source=./internal/ctrl/sso/sso.go -destination=tests/mocks/mock_sso.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSSOSvc is a mock of SSOSvc interface.
type MockSSOSvc struct {
	ctrl     *gomock.Controller
	recorder *MockSSOSvcMockRecorder
	isgomock struct{}
}

// MockSSOSvcMockRecorder is the mock recorder for MockSSOSvc.
type MockSSOSvcMockRecorder struct {
	mock *MockSSOSvc
}

// NewMockSSOSvc creates a new mock instance.
func NewMockSSOSvc(ctrl *gomock.Controller) *MockSSOSvc {
	mock := &MockSSOSvc{ctrl: ctrl}
	mock.recorder = &MockSSOSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSSOSvc) EXPECT() *MockSSOSvcMockRecorder {
	return m.recorder
}

// ParseClaims mocks base method.
func (m *MockSSOSvc) ParseClaims(ctx context.Context, token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseClaims", ctx, token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseClaims indicates an expected call of ParseClaims.
func (mr *MockSSOSvcMockRecorder) ParseClaims(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseClaims", reflect.TypeOf((*MockSSOSvc)(nil).ParseClaims), ctx, token)
}
