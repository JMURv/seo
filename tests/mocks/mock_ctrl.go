// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/ctrl/ctrl.go
//
// Generated by this command:
//
//	mockgen -source=./internal/ctrl/ctrl.go -destination=tests/mocks/mock_ctrl.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/JMURv/seo/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockAppRepo is a mock of AppRepo interface.
type MockAppRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAppRepoMockRecorder
	isgomock struct{}
}

// MockAppRepoMockRecorder is the mock recorder for MockAppRepo.
type MockAppRepoMockRecorder struct {
	mock *MockAppRepo
}

// NewMockAppRepo creates a new mock instance.
func NewMockAppRepo(ctrl *gomock.Controller) *MockAppRepo {
	mock := &MockAppRepo{ctrl: ctrl}
	mock.recorder = &MockAppRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppRepo) EXPECT() *MockAppRepoMockRecorder {
	return m.recorder
}

// CreatePage mocks base method.
func (m *MockAppRepo) CreatePage(ctx context.Context, req *models.Page) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePage", ctx, req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePage indicates an expected call of CreatePage.
func (mr *MockAppRepoMockRecorder) CreatePage(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePage", reflect.TypeOf((*MockAppRepo)(nil).CreatePage), ctx, req)
}

// CreateSEO mocks base method.
func (m *MockAppRepo) CreateSEO(ctx context.Context, req *models.SEO) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSEO", ctx, req)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSEO indicates an expected call of CreateSEO.
func (mr *MockAppRepoMockRecorder) CreateSEO(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSEO", reflect.TypeOf((*MockAppRepo)(nil).CreateSEO), ctx, req)
}

// DeletePage mocks base method.
func (m *MockAppRepo) DeletePage(ctx context.Context, slug string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePage", ctx, slug)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePage indicates an expected call of DeletePage.
func (mr *MockAppRepoMockRecorder) DeletePage(ctx, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePage", reflect.TypeOf((*MockAppRepo)(nil).DeletePage), ctx, slug)
}

// DeleteSEO mocks base method.
func (m *MockAppRepo) DeleteSEO(ctx context.Context, name, pk string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSEO", ctx, name, pk)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSEO indicates an expected call of DeleteSEO.
func (mr *MockAppRepoMockRecorder) DeleteSEO(ctx, name, pk any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSEO", reflect.TypeOf((*MockAppRepo)(nil).DeleteSEO), ctx, name, pk)
}

// GetPage mocks base method.
func (m *MockAppRepo) GetPage(ctx context.Context, slug string) (*models.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPage", ctx, slug)
	ret0, _ := ret[0].(*models.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPage indicates an expected call of GetPage.
func (mr *MockAppRepoMockRecorder) GetPage(ctx, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPage", reflect.TypeOf((*MockAppRepo)(nil).GetPage), ctx, slug)
}

// GetSEO mocks base method.
func (m *MockAppRepo) GetSEO(ctx context.Context, name, pk string) (*models.SEO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSEO", ctx, name, pk)
	ret0, _ := ret[0].(*models.SEO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSEO indicates an expected call of GetSEO.
func (mr *MockAppRepoMockRecorder) GetSEO(ctx, name, pk any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSEO", reflect.TypeOf((*MockAppRepo)(nil).GetSEO), ctx, name, pk)
}

// ListPages mocks base method.
func (m *MockAppRepo) ListPages(ctx context.Context) ([]*models.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPages", ctx)
	ret0, _ := ret[0].([]*models.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPages indicates an expected call of ListPages.
func (mr *MockAppRepoMockRecorder) ListPages(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPages", reflect.TypeOf((*MockAppRepo)(nil).ListPages), ctx)
}

// UpdatePage mocks base method.
func (m *MockAppRepo) UpdatePage(ctx context.Context, slug string, req *models.Page) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePage", ctx, slug, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePage indicates an expected call of UpdatePage.
func (mr *MockAppRepoMockRecorder) UpdatePage(ctx, slug, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePage", reflect.TypeOf((*MockAppRepo)(nil).UpdatePage), ctx, slug, req)
}

// UpdateSEO mocks base method.
func (m *MockAppRepo) UpdateSEO(ctx context.Context, req *models.SEO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSEO", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSEO indicates an expected call of UpdateSEO.
func (mr *MockAppRepoMockRecorder) UpdateSEO(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSEO", reflect.TypeOf((*MockAppRepo)(nil).UpdateSEO), ctx, req)
}

// MockAppCtrl is a mock of AppCtrl interface.
type MockAppCtrl struct {
	ctrl     *gomock.Controller
	recorder *MockAppCtrlMockRecorder
	isgomock struct{}
}

// MockAppCtrlMockRecorder is the mock recorder for MockAppCtrl.
type MockAppCtrlMockRecorder struct {
	mock *MockAppCtrl
}

// NewMockAppCtrl creates a new mock instance.
func NewMockAppCtrl(ctrl *gomock.Controller) *MockAppCtrl {
	mock := &MockAppCtrl{ctrl: ctrl}
	mock.recorder = &MockAppCtrlMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppCtrl) EXPECT() *MockAppCtrlMockRecorder {
	return m.recorder
}

// CreatePage mocks base method.
func (m *MockAppCtrl) CreatePage(ctx context.Context, req *models.Page) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePage", ctx, req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePage indicates an expected call of CreatePage.
func (mr *MockAppCtrlMockRecorder) CreatePage(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePage", reflect.TypeOf((*MockAppCtrl)(nil).CreatePage), ctx, req)
}

// CreateSEO mocks base method.
func (m *MockAppCtrl) CreateSEO(ctx context.Context, req *models.SEO) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSEO", ctx, req)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSEO indicates an expected call of CreateSEO.
func (mr *MockAppCtrlMockRecorder) CreateSEO(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSEO", reflect.TypeOf((*MockAppCtrl)(nil).CreateSEO), ctx, req)
}

// DeletePage mocks base method.
func (m *MockAppCtrl) DeletePage(ctx context.Context, slug string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePage", ctx, slug)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePage indicates an expected call of DeletePage.
func (mr *MockAppCtrlMockRecorder) DeletePage(ctx, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePage", reflect.TypeOf((*MockAppCtrl)(nil).DeletePage), ctx, slug)
}

// DeleteSEO mocks base method.
func (m *MockAppCtrl) DeleteSEO(ctx context.Context, name, pk string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSEO", ctx, name, pk)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSEO indicates an expected call of DeleteSEO.
func (mr *MockAppCtrlMockRecorder) DeleteSEO(ctx, name, pk any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSEO", reflect.TypeOf((*MockAppCtrl)(nil).DeleteSEO), ctx, name, pk)
}

// GetPage mocks base method.
func (m *MockAppCtrl) GetPage(ctx context.Context, slug string) (*models.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPage", ctx, slug)
	ret0, _ := ret[0].(*models.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPage indicates an expected call of GetPage.
func (mr *MockAppCtrlMockRecorder) GetPage(ctx, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPage", reflect.TypeOf((*MockAppCtrl)(nil).GetPage), ctx, slug)
}

// GetSEO mocks base method.
func (m *MockAppCtrl) GetSEO(ctx context.Context, name, pk string) (*models.SEO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSEO", ctx, name, pk)
	ret0, _ := ret[0].(*models.SEO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSEO indicates an expected call of GetSEO.
func (mr *MockAppCtrlMockRecorder) GetSEO(ctx, name, pk any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSEO", reflect.TypeOf((*MockAppCtrl)(nil).GetSEO), ctx, name, pk)
}

// ListPages mocks base method.
func (m *MockAppCtrl) ListPages(ctx context.Context) ([]*models.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPages", ctx)
	ret0, _ := ret[0].([]*models.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPages indicates an expected call of ListPages.
func (mr *MockAppCtrlMockRecorder) ListPages(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPages", reflect.TypeOf((*MockAppCtrl)(nil).ListPages), ctx)
}

// UpdatePage mocks base method.
func (m *MockAppCtrl) UpdatePage(ctx context.Context, slug string, req *models.Page) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePage", ctx, slug, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePage indicates an expected call of UpdatePage.
func (mr *MockAppCtrlMockRecorder) UpdatePage(ctx, slug, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePage", reflect.TypeOf((*MockAppCtrl)(nil).UpdatePage), ctx, slug, req)
}

// UpdateSEO mocks base method.
func (m *MockAppCtrl) UpdateSEO(ctx context.Context, req *models.SEO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSEO", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSEO indicates an expected call of UpdateSEO.
func (mr *MockAppCtrlMockRecorder) UpdateSEO(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSEO", reflect.TypeOf((*MockAppCtrl)(nil).UpdateSEO), ctx, req)
}

// MockCacheService is a mock of CacheService interface.
type MockCacheService struct {
	ctrl     *gomock.Controller
	recorder *MockCacheServiceMockRecorder
	isgomock struct{}
}

// MockCacheServiceMockRecorder is the mock recorder for MockCacheService.
type MockCacheServiceMockRecorder struct {
	mock *MockCacheService
}

// NewMockCacheService creates a new mock instance.
func NewMockCacheService(ctrl *gomock.Controller) *MockCacheService {
	mock := &MockCacheService{ctrl: ctrl}
	mock.recorder = &MockCacheServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheService) EXPECT() *MockCacheServiceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCacheService) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockCacheServiceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCacheService)(nil).Close))
}

// Delete mocks base method.
func (m *MockCacheService) Delete(ctx context.Context, key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", ctx, key)
}

// Delete indicates an expected call of Delete.
func (mr *MockCacheServiceMockRecorder) Delete(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCacheService)(nil).Delete), ctx, key)
}

// GetToStruct mocks base method.
func (m *MockCacheService) GetToStruct(ctx context.Context, key string, dest any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToStruct", ctx, key, dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetToStruct indicates an expected call of GetToStruct.
func (mr *MockCacheServiceMockRecorder) GetToStruct(ctx, key, dest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToStruct", reflect.TypeOf((*MockCacheService)(nil).GetToStruct), ctx, key, dest)
}

// InvalidateKeysByPattern mocks base method.
func (m *MockCacheService) InvalidateKeysByPattern(ctx context.Context, pattern string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InvalidateKeysByPattern", ctx, pattern)
}

// InvalidateKeysByPattern indicates an expected call of InvalidateKeysByPattern.
func (mr *MockCacheServiceMockRecorder) InvalidateKeysByPattern(ctx, pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateKeysByPattern", reflect.TypeOf((*MockCacheService)(nil).InvalidateKeysByPattern), ctx, pattern)
}

// Set mocks base method.
func (m *MockCacheService) Set(ctx context.Context, t time.Duration, key string, val any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", ctx, t, key, val)
}

// Set indicates an expected call of Set.
func (mr *MockCacheServiceMockRecorder) Set(ctx, t, key, val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCacheService)(nil).Set), ctx, t, key, val)
}
