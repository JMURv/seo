// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/controller/ctrl.go
//
// Generated by this command:
//
//	mockgen -source=./internal/controller/ctrl.go -destination=mocks/mock_repos.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	model "github.com/JMURv/seo-svc/pkg/model"
	gomock "go.uber.org/mock/gomock"
)

// MockappRepo is a mock of appRepo interface.
type MockappRepo struct {
	ctrl     *gomock.Controller
	recorder *MockappRepoMockRecorder
}

// MockappRepoMockRecorder is the mock recorder for MockappRepo.
type MockappRepoMockRecorder struct {
	mock *MockappRepo
}

// NewMockappRepo creates a new mock instance.
func NewMockappRepo(ctrl *gomock.Controller) *MockappRepo {
	mock := &MockappRepo{ctrl: ctrl}
	mock.recorder = &MockappRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockappRepo) EXPECT() *MockappRepoMockRecorder {
	return m.recorder
}

// CreateSEO mocks base method.
func (m *MockappRepo) CreateSEO(ctx context.Context, req *model.SEO) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSEO", ctx, req)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSEO indicates an expected call of CreateSEO.
func (mr *MockappRepoMockRecorder) CreateSEO(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSEO", reflect.TypeOf((*MockappRepo)(nil).CreateSEO), ctx, req)
}

// DeleteSEO mocks base method.
func (m *MockappRepo) DeleteSEO(ctx context.Context, name, pk string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSEO", ctx, name, pk)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSEO indicates an expected call of DeleteSEO.
func (mr *MockappRepoMockRecorder) DeleteSEO(ctx, name, pk any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSEO", reflect.TypeOf((*MockappRepo)(nil).DeleteSEO), ctx, name, pk)
}

// GetSEO mocks base method.
func (m *MockappRepo) GetSEO(ctx context.Context, name, pk string) (*model.SEO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSEO", ctx, name, pk)
	ret0, _ := ret[0].(*model.SEO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSEO indicates an expected call of GetSEO.
func (mr *MockappRepoMockRecorder) GetSEO(ctx, name, pk any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSEO", reflect.TypeOf((*MockappRepo)(nil).GetSEO), ctx, name, pk)
}

// UpdateSEO mocks base method.
func (m *MockappRepo) UpdateSEO(ctx context.Context, req *model.SEO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSEO", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSEO indicates an expected call of UpdateSEO.
func (mr *MockappRepoMockRecorder) UpdateSEO(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSEO", reflect.TypeOf((*MockappRepo)(nil).UpdateSEO), ctx, req)
}

// MockDiscovery is a mock of Discovery interface.
type MockDiscovery struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoveryMockRecorder
}

// MockDiscoveryMockRecorder is the mock recorder for MockDiscovery.
type MockDiscoveryMockRecorder struct {
	mock *MockDiscovery
}

// NewMockDiscovery creates a new mock instance.
func NewMockDiscovery(ctrl *gomock.Controller) *MockDiscovery {
	mock := &MockDiscovery{ctrl: ctrl}
	mock.recorder = &MockDiscoveryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscovery) EXPECT() *MockDiscoveryMockRecorder {
	return m.recorder
}

// Deregister mocks base method.
func (m *MockDiscovery) Deregister() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deregister")
	ret0, _ := ret[0].(error)
	return ret0
}

// Deregister indicates an expected call of Deregister.
func (mr *MockDiscoveryMockRecorder) Deregister() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deregister", reflect.TypeOf((*MockDiscovery)(nil).Deregister))
}

// Register mocks base method.
func (m *MockDiscovery) Register() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register")
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockDiscoveryMockRecorder) Register() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockDiscovery)(nil).Register))
}

// MockCacheRepo is a mock of CacheRepo interface.
type MockCacheRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCacheRepoMockRecorder
}

// MockCacheRepoMockRecorder is the mock recorder for MockCacheRepo.
type MockCacheRepoMockRecorder struct {
	mock *MockCacheRepo
}

// NewMockCacheRepo creates a new mock instance.
func NewMockCacheRepo(ctrl *gomock.Controller) *MockCacheRepo {
	mock := &MockCacheRepo{ctrl: ctrl}
	mock.recorder = &MockCacheRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheRepo) EXPECT() *MockCacheRepoMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCacheRepo) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockCacheRepoMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCacheRepo)(nil).Close))
}

// Delete mocks base method.
func (m *MockCacheRepo) Delete(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCacheRepoMockRecorder) Delete(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCacheRepo)(nil).Delete), ctx, key)
}

// Get mocks base method.
func (m *MockCacheRepo) Get(ctx context.Context, key string, dest any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key, dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockCacheRepoMockRecorder) Get(ctx, key, dest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCacheRepo)(nil).Get), ctx, key, dest)
}

// InvalidateKeysByPattern mocks base method.
func (m *MockCacheRepo) InvalidateKeysByPattern(ctx context.Context, pattern string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateKeysByPattern", ctx, pattern)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateKeysByPattern indicates an expected call of InvalidateKeysByPattern.
func (mr *MockCacheRepoMockRecorder) InvalidateKeysByPattern(ctx, pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateKeysByPattern", reflect.TypeOf((*MockCacheRepo)(nil).InvalidateKeysByPattern), ctx, pattern)
}

// Set mocks base method.
func (m *MockCacheRepo) Set(ctx context.Context, t time.Duration, key string, val any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, t, key, val)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockCacheRepoMockRecorder) Set(ctx, t, key, val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCacheRepo)(nil).Set), ctx, t, key, val)
}
